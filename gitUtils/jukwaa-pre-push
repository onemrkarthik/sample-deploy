#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

# checks if branch has something pending
function parse_git_dirty() {
  git diff --quiet --ignore-submodules HEAD 2>/dev/null; [ $? -eq 1 ] && echo "*"
}

# gets the current git branch
function parse_git_branch() {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/\1$(parse_git_dirty)/"
}

# get last commit hash prepended with @ (i.e. @8a323d0)
function parse_git_hash() {
  git rev-parse --short HEAD 2> /dev/null | sed "s/\(.*\)/@\1/"
}

function parse_commit_message() {
    git log -1 HEAD --format=%B 2> /dev/null
}

function parse_user_name() {
    git log -1 --format=format:%an HEAD 2> /dev/null
}

function parse_user_email() {
    git log -1 --format=format:%ae HEAD 2> /dev/null
}

function sanitize_commit_message() {
    echo $git_commit_message | tr -d '[:space:]' 2> /dev/null
}

git_branch=$(parse_git_branch)$(parse_git_hash)
git_commit_message=$(parse_commit_message)
git_commit_user_name=$(parse_user_name)
git_commit_user_email=$(parse_user_email)
sanitized_commit_message=$(echo $git_commit_message | tr -d '[:space:]' 2> /dev/null)
REVIEW_RE="Reviewers:(.+)Reviewed By:(.+)"

if [[ $sanitized_commit_message =~ $REVIEW_RE ]]
then
    list_of_reviewers=${BASH_REMATCH[1]}
    reviewed_by=${BASH_REMATCH[2]}

    if [[ -n "${reviewed_by}" && -n "${list_of_reviewers}" && "${list_of_reviewers}" == *"${reviewed_by}"* ]]
    then
        echo >&2 "Great job $git_commit_user_name. Your CR was accepted by $reviewed_by and it can now be pushed to $git_branch :) "
        exit 1;
    else
        echo >2 "Boooo! $git_commit_user_name, looks like no one reviewed the change on $git_branch. Code can only be pushed if it's been reviewed by atleast 1 person :)"
        exit 1
    fi
fi

exit 0
